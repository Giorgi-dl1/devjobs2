{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}

<article{{ attributes.addClass('node') }}>

  {{ title_prefix }}
  {% if not page %}
    <h2{{ title_attributes }}>
      <a href="{{ url }}" rel="bookmark">{{ label }}</a>
    </h2>
  {% endif %}

  <div{{ content_attributes.addClass('node-content') }}>

    <div class="flex items-center flex-col md:flex-row md:justify-between bg-white dark:bg-[#19202D] rounded-md md:pr-10 md:overflow-hidden">
      <div class="flex items-center flex-col md:flex-row md:gap-10">
        <div class="w-[50px] h-[50px] md:w-[140px] md:h-[140px] mt-[-25px] md:mt-0 mb-6 md:mb-0 flex mx-auto md:mx-0 rounded-2xl md:rounded-none ">
          {{ content.field_company_logo }}
        </div>
        <div class="flex flex-col text-center md:text-left ">
          <div class='font-bold text-xl dark:text-white md:text-left'>
            {{ content.field_company_name }}
          </div>
          <div class='text-[#6E8098] mb-7 mt-3 md:mb-0'>
            {{ content.field_company_website }}
          </div>
        </div>

      </div>
      <div>
        {% set url = content.field_company_website[0]['#url'] %}
        <a href="{{ url }}" target="_blank">
          <button class='px-[1.8rem] md:text-right py-[1rem] text-[#5964E0] bg-[#5964e041] hover:bg-[#5964e07c] font-bold align-center mb-[32px] md:mb-0 rounded-md hover:bg-[#939BF4] transition duration-500 ease-in'>
            Company Site
          </button>
        </a>

      </div>

    </div>

    <div class='p-6 md:p-12 bg-white dark:bg-[#19202D] mt-6 md:mt-8 rounded-md'>
      <div class='flex flex-col md:flex-row md:items-center md:justify-between'>
        <div>
          <div class="text-[#6E8098]">
            <span><span id="time"></span> ago . </span>
            <span>{{ job.full_time ? 'Full Time' : 'Part Time' }}</span>
          </div>
          <div class='text-[20px] md:text-3xl font-bold dark:text-white'>
            {{  node.getTitle() }}
          </div>
          <div class='font-bold text-[#5964E0]'>
            {{ content.field_location }}
          </div>
        </div>
        <div>
          <button class='px-[1.8rem] py-[1rem] mt-14 md:mt-0 bg-[#5964E0] font-bold text-white align-center rounded-md hover:bg-[#939BF4] transition duration-500 ease-in w-full md:max-w-max'>Apply Now</button>
        </div>
      </div>
      <div class='text-[#6E8098] my-8 md:my-10'>
        {{ content.field_description }}
      </div>
      <div class='text-[20px] md:text-3xl font-bold dark:text-white'>
          Requirements
      </div>
      <div class='text-[#6E8098] my-6 md:my-8'>
        {{ content.field_requirements }}
      </div>
      <div class='text-[#6E8098] pl-4'>
        {{ content.field_requirements_list }}
      </div>
      <div class='text-[20px] md:text-3xl mt-9 font-bold dark:text-white'>
          What You Will Do
      </div>
      <div class='text-[#6E8098] my-6 md:my-8'>
        {{ content.field_todos }}
      </div>
      <div class='text-[#6E8098] pl-4'>
        {{ content.field_todo_list }}
      </div>
    </div>
    <footer class='flex justify-between bg-white dark:bg-[#19202D] py-6 px-[24px] md:px-[50px] lg:px-[165px] mx-[-24px] md:mx-[-50px] lg:mx-[-165px] translate-y-[116px]'>
        <div class='hidden md:block'>
            <div class='text-[20px] md:text-xl font-bold dark:text-white'>
              {{  node.getTitle() }}
            </div>
            <div class='text-[#6E8098]'>
              So Digital Inc.
            </div>
        </div>
        <div class='w-full md:max-w-max'>
          <button class='px-[1.8rem] py-[1rem] bg-[#5964E0] font-bold text-white align-center rounded-md hover:bg-[#939BF4] transition duration-500 ease-in w-full  md:max-w-max'>Apply Now</button>
        </div>
    </footer>
  </div>
</article>



<script>
  const timeDiv = document.getElementById('time');
  const calculate = (nodeCreated, currentTime) => {
    let time = Number(currentTime) - Number(nodeCreated);
    let oper = 's';
    if(time > 60){
      time = Math.floor(Number(time) / 60);
      oper = 'm';
      if(time >= 60) {
          time = Math.floor(Number(time) / 60);
          oper = 'h';
          if(time >= 24) {
              time = Math.floor(Number(time) / 24);
              oper = 'd';
              if(time >= 7){
                  time = Math.floor(Number(time) / 7);
                  oper = 'w';
                  if(time >= 5){
                      time = Math.floor(Number(time) / 5);
                      oper = 'm';
                      if(time >= 12) {
                        time = Math.floor(Number(time) / 12);
                        oper = 'y';
                      }
                  }
              }
          }
      }
    }
    const string = `${time}${oper}`;
    return string;
  }
  const created = {{ node.getCreatedTime() }};
  const current = Math.floor(Date.now() / 1000);
  const passed = calculate(created,current);
  timeDiv.innerText = passed;
</script>
